shiny::runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
shiny::runApp('F:/UW/Lectures/INFO 201/a8-data-app-WoongJin3')
runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
library("dplyr")
library("ggplot2")
library("tidyr")
library(maps)
library("ggvis")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
shiny::runApp('F:/UW/Lectures/INFO 201/a8-data-app-WoongJin3')
runApp('C:/Users/David/Desktop/INFO201-Final-Project')
runApp('C:/Users/David/Desktop/INFO201-Final-Project')
install.packages("ggplot2")
runApp('C:/Users/David/Desktop/INFO201-Final-Project')
install.packages("plotly")
install.packages("plotly")
shiny::runApp('C:/Users/David/Desktop/INFO201-Final-Project')
install.packages("dplyr")
install.packages("knitr")
install.packages("styler")
install.packages("dplyr")
shiny::runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
runApp('F:/UW/Lectures/INFO 201/a8-data-app-WoongJin3')
runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
library(dplyr)
library(knitr)
library(styler)
install.packages("dplyr")
library("ggplot2")
install.packages(c("dplyr", "knitr", "styler"))
#install.packages("dplyr")
#install.packages("knitr")
#install.packages("styler")
library(dplyr)
library(knitr)
library(styler)
store <- read.csv("grocery_store_data_cleaned.csv")
install.packages(c("dplyr", "ggplot2", "ggvis", "maps", "tidyr"))
install.packages(c("dplyr", "ggplot2", "ggvis", "maps", "tidyr"))
install.packages(c("dplyr", "DT", "ggmap", "leaflet", "plotly", "RColorBrewer", "shiny", "shinycssloaders", "shinythemes"))
shiny::runApp('F:/UW/Lectures/INFO 201/INFO201-Final-Project')
install.packages(c("dplyr", "DT", "ggplot2", "shiny"))
install.packages(c("dplyr", "DT", "ggplot2", "shiny"))
shiny::runApp('F:/UW/Lectures/INFO 201/a8-data-app-WoongJin3')
library(dplyr)
library(knitr)
library(styler)
store <- read.csv("grocery_store_data_cleaned.csv")
setwd("C:/Users/David/Desktop/Datathon2020")
store <- read.csv("grocery_store_data_cleaned.csv")
# Unique product names
product_name <- unique(store$NAME)
# Units, reference, name, unit_pricesell/buy, category, total_pricesell/buy, margin, profit
name_col <- store %>%
filter(REFERENCE == 1079) %>%
select(NAME)
profit_col <- store %>%
filter(REFERENCE == 1079) %>%
select(PROFIT)
product_info <- list(name = name_col, profit = profit_col)
function1 <- function(ref){
name <- paste0("product", ref, "_info")
name <- list(name = name_col, profit = profit_col)
}
store <- read.csv("grocery_store_data_cleaned.csv")
View(store)
View(store)
store <- store %>%
select(REFERENCE, CODE, NAME, UNITS, UNIT_PRICEBUY, UNIT_PRICESELL, DATE, TOTAL_PRICEBUY, TOTAL_PRICESELL, UNIT_PRICE_MARGIN, PROFIT)
profit_col <- store %>%
filter(REFERENCE == 1079) %>%
select(PROFIT)
View(profit_col)
View(profit_col)
profit_col <- store %>%
filter(REFERENCE == 1079) %>%
select(UNIT_PRICEBUY)
View(profit_col)
View(profit_col)
profit_col <- store %>%
filter(REFERENCE == 1079) %>%
select(DATE)
View(profit_col)
sample_product <- store %>%
filter(REFERENCE == 1079) %>%
select(sample_product, PROFIT)
sample_product <- store %>%
filter(REFERENCE == 1079)
sample_profit <- select(sample_product, PROFIT)
sample_total_sell <- select(sample_product, TOTAL_PRICESELL)
sample_unit <- select(sample_product, UNITS)
sample_plot <- ggplot(data = sample_product) +
geom_point(mapping = aes(x = UNIT_PRICE_MARGIN, y = PROFIT))
View(store)
View(store)
View(store)
store <- store %>%
select(REFERENCE, NAME, UNITS, UNIT_PRICEBUY, UNIT_PRICESELL, DATE, TOTAL_PRICEBUY, TOTAL_PRICESELL, UNIT_PRICE_MARGIN, PROFIT)
View(store)
sample_date <- select(sample_product, DATE)
View(sample_date)
sample_product <- store %>%
filter(REFERENCE == 1079) %>%
select(DATE)
date1 <- as.Date(sample_prod[2, 1])
sample_prod <- store %>%
filter(REFERENCE == 1079) %>%
select(DATE)
date1 <- as.Date(sample_prod[2, 1])
date2 <- as.Date(sample_prod[5, 1])
difftime(as.POSIXct(date2), as.POSIXct(date1), units="days")
date2 <- as.Date(sample_prod[7, 1])
difftime(as.POSIXct(date2), as.POSIXct(date1), units="days")
date2 <- as.Date(sample_prod[10, 1])
difftime(as.POSIXct(date2), as.POSIXct(date1), units="days")
View(sample_prod)
sorted_all_data <- arrange(store, REFERENCE) %>%
filter(UNIT_PRICEBUY != 0)%>%
select(NAME, DATE)
for(i in 1 : 3000) {
date1 <- as.Date(sorted_all_data[i,2])
date2 <- as.Date(sorted_all_data[i+1,2])
if(sorted_all_data[i,1] == sorted_all_data[i+1, 1] && difftime(as.POSIXct(date2), as.POSIXct(date1), units="days") > 30)
print(sorted_all_data[i,1])
}
for(i in 1 : nrow(sorted_all_data)) {
date1 <- as.Date(sorted_all_data[i,2])
date2 <- as.Date(sorted_all_data[i+1,2])
if(sorted_all_data[i,1] == sorted_all_data[i+1, 1] && difftime(as.POSIXct(date2), as.POSIXct(date1), units="days") > 30)
print(sorted_all_data[i,1])
}
setwd("F:/UW/Lectures/INFO 201/INFO201-Final-Project")
runApp()
runApp()
diversity
########################
### Install Packages ###
########################
# install.packages("shinythemes")
############
## SET UP ##
############
library(dplyr)
df_2006_2015 <- read.csv("data/MERGED2006-2015.csv", stringsAsFactors = FALSE)
# View(df_2006_2015)
sapply(df_2006_2015, class)
# set a var to change the column name
col <- c("Year", "UnitID", "OPEID", "Institution.Name", "City",
"State.Postcode", "Zipcode", "Admission.Rate", "Admission.Rate.For.All",
"Avg.SAT", "Enrollment", "In-State.Tuition", "Out-State.Tuition",
"Net.Tuition.Revenue", "Instructional.Expenditures", "Avg.Faculty.Salary",
"Percent.1st-generation", "Avg.Age", "Total.Enrolled.Men", "Total.Enrolled.Women",
"Open.Admissions.Policy")
colnames(df_2006_2015) <- col
# transfer the mode for some columns
df_2006_2015[, 14:18] <- as.numeric(unlist(df_2006_2015[, 14:18]), na.rm = TRUE)
# a function to calculate the total number of school in each year
num_schools <- function(year) {
df_2006_2015 %>% filter(Year == year) %>% nrow()
}
# set a summary table of all school number
num_school_table <- data.frame(Year = c(2006:2015),
Total.Number = c(num_schools(2006),
num_schools(2007),
num_schools(2008),
num_schools(2009),
num_schools(2010),
num_schools(2011),
num_schools(2012),
num_schools(2013),
num_schools(2014),
num_schools(2015)), stringsAsFactors = FALSE)
# admission table for the `admission`
admission <- df_2006_2015 %>% select(1, (4:6), (8:10))
summary_adm <- admission %>% select("Admission.Rate", "Admission.Rate.For.All") %>% summary()
#----------------------------------------------------
# This is for the Cost page
cost_page <- df_2006_2015 %>% select(1, (4:6), (12:16))
cost_page_tution <- cost_page %>% filter(Year == "2015") %>% select((2:6), 9)
colnames(cost_page_tution) <- c("Institution.Name", "City", "State", "In.State", "Out.State", "Avg.Faculty.Salary")
cost_page_tution$In.State <- as.numeric(as.character(cost_page_tution$In.State))
cost_page_tution$Out.State <- as.numeric(as.character(cost_page_tution$Out.State))
for (i in 1:nrow(cost_page_tution)) {
if (cost_page_tution$In.State[i] == cost_page_tution$Out.State[i]) {
cost_page_tution$Type[i] <- "Private"
} else {
cost_page_tution$Type[i] <- "Public"
}
}
#----------------------------------------------------
# average age by year in each state
avg_age_year <- df_2006_2015 %>% group_by(Year, State.Postcode) %>%
summarize(avg.age_year = mean(Avg.Age,  na.rm = TRUE))
#### For map
# extract the data from the raw data set
df_2015 <- read.csv("data/MERGED2015.csv", stringsAsFactors = FALSE)
# set a var to change the column name
col_2015 <- c("Year", "UnitID", "OPEID", "Institution.Name", "City",
"State.Postcode", "Zipcode", "Institution.URL", "Lat", "Long",
"Admission.Rate", "Admission.Rate.For.All",
"Avg.SAT", "Enrollment", "In-State.Tuition", "Out-State.Tuition",
"Net.Tuition.Revenue", "Instructional.Expenditures", "Avg.Faculty.Salary",
"Percent.1st-generation", "Avg.Age", "Total.Enrolled.Men", "Total.Enrolled.Women",
"Open.Admissions.Policy")
colnames(df_2015) <- col_2015
sapply(df_2015, class)
# View(df_2015)
# set numeric type for several columns
df_2015[, 20:21] <- as.numeric(unlist(df_2015[, 20:21]), na.rm = TRUE)
cities <- as.vector(unique(df_2015$City))
# Filter null values
df_2015 <- df_2015 %>% filter(Long != "NA", Lat != "NA")
## for server.R
# select state data
getState <- function(states) {
selected <- df_2015 %>% filter(State.Postcode %in% state.abb[match(states, state.name)])
selected
}
# Prepare the text for the initial map:
text <- paste("<h4/>", df_2015$Institution.Name, "<br/>", "<br/>",
"Enrollment Number: ", df_2015$Enrollment, "<br/>",
"In-state Tuition: ", " $", df_2015$`In-State.Tuition`, "<br/>",
"Out-state Tuition: ", " $", df_2015$`Out-State.Tuition`, "<br/>",
"Admission Rate: ", round(df_2015$Admission.Rate, 2) * 100, "%", "<br/>",
"Average Age: ", round(df_2015$Avg.Age, 0), "<br/>",
sep = "") %>% lapply(htmltools::HTML)
# extract the data number for `ui map`
num_2015 <- nrow(df_2015)
num_no_SAT <- df_2015 %>% filter(Avg.SAT == '0') %>% nrow()
summary <- df_2015 %>%
summarize(avg.in.tuition = mean(`In-State.Tuition`, na.rm = TRUE),
avg.out.tuition = mean(`Out-State.Tuition`, na.rm = TRUE),
avg.age = mean(Avg.Age,  na.rm = TRUE))
# function get the top column info
max_col <- function(var) {
col <- df_2015 %>% arrange(-var) %>% head(1)
col
}
# Select the data for diversity
diversity_data <- df_2006_2015 %>%
select(Year, Institution.Name, City, State.Postcode, Enrollment,
`Percent.1st-generation`, Total.Enrolled.Men, Total.Enrolled.Women) %>%
mutate(State = state.name[match(State.Postcode, state.abb)],
Total.Men = round(Enrollment * Total.Enrolled.Men, 0),
Total.Women = round(Enrollment * Total.Enrolled.Women, 0),
Total.First.Gen = round(Enrollment * `Percent.1st-generation`, 0)) %>%
select(-State.Postcode, -`Percent.1st-generation`, -Total.Enrolled.Men, -Total.Enrolled.Women)
# Select the data for diversity
diversity_data <- df_2006_2015 %>%
select(Year, Institution.Name, City, State.Postcode, Enrollment,
`Percent.1st-generation`, Total.Enrolled.Men, Total.Enrolled.Women) %>%
mutate(State = state.name[match(State.Postcode, state.abb)],
Total.Men = round(Enrollment * Total.Enrolled.Men, 0),
Total.Women = round(Enrollment * Total.Enrolled.Women, 0),
Total.First.Gen = round(Enrollment * `Percent.1st-generation`, 0)) %>%
select(-State.Postcode, -`Percent.1st-generation`, -Total.Enrolled.Men, -Total.Enrolled.Women)
View(diversity_data)
library(dplyr)
library(knitr)
library(styler)
origin_data <- read.csv("grocery_store_data_cleaned.csv")
nameToDate <- arrange(store, REFERENCE) %>%
filter(UNIT_PRICEBUY != 0)%>%
select(NAME, DATE)
for(i in 1 : 10000) {
date1 <- as.Date(sorted_all_data[i,2])
date2 <- as.Date(sorted_all_data[i+1,2])
if(sorted_all_data[i,1] == sorted_all_data[i+1, 1] && difftime(as.POSIXct(date2), as.POSIXct(date1), units="days") > 30)
print(sorted_all_data[i,1])
}
setwd("C:/Users/David/Desktop/Datathon2020")
origin_data <- read.csv("grocery_store_data_cleaned.csv")
nameToDate <- arrange(store, REFERENCE) %>%
filter(UNIT_PRICEBUY != 0)%>%
select(NAME, DATE)
for(i in 1 : 10000) {
date1 <- as.Date(sorted_all_data[i,2])
date2 <- as.Date(sorted_all_data[i+1,2])
if(sorted_all_data[i,1] == sorted_all_data[i+1, 1] && difftime(as.POSIXct(date2), as.POSIXct(date1), units="days") > 30)
print(sorted_all_data[i,1])
}
nameToDate <- arrange(origin_data, REFERENCE) %>%
filter(UNIT_PRICEBUY != 0)%>%
select(NAME, DATE)
tempName <- ""
for(i in 1 : 1000) {
date1 <- as.Date(nameToDate[i,2])
date2 <- as.Date(nameToDate[i+1,2])
if(nameToDate[i,1] == nameToDate[i+1, 1] && difftime(as.POSIXct(date2), as.POSIXct(date1), units="days") > 15)
if(nameToDate[i,1] != tempName){
print(nameToDate[i,1])
tempName <- nameToDate[i,1]
}
}
sample_product <- store %>%
filter(REFERENCE == 1001)
